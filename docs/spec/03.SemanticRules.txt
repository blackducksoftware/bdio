# Semantic Rules
When processing the BDIO model, there are several defined behaviors that should uniformly apply to ensure interoperability. Often it is impractical for publishers to produce fully normal BDIO model, therefore several relationships are expected to be "implicit", processors MUST handle BDIO data the same regardless of their presence. The published BDIO data in conjunction with any implicit relationships constitutes a connected graph.

## The Root
The "root" of the BDIO data is a top-level object (one of: "Project", "Container", "Repository" or "FileCollection"). For a project, the root project cannot be claimed as a sub-project or previous version by any other project. Publishers MUST NOT produce BDIO data with multiple roots; processors MAY elect an arbitrary object as the root or fail outright when the root could be ambiguous.

## Implicit Relationships

### Missing File Parents
The relationship between a file node and it's parent need not be explicitly defined provided that the resolved absolute hierarchical path can be used to unambiguously identify the parent file.

### Missing Project Dependencies
The relationship between a component and the root object need not be explicity defined: any component that is not associated with a dependency is assumed to be a dependency of the root object. Processors MUST NOT assume any default values for the implicit dependency node necessary to describe the connection between the component and the root object.

## Preservation of Unknown Data
Publishers may choose to include data in a BDIO data set that is not part of the BDIO model, this data will come in the form of JSON-LD types or terms not defined by this specification. Processors MUST preserve this unknown data when handling BDIO, however any data which is not reachable from the root project SHOULD be ignored and does not need to preserved.

## File Data Properties
When describing file or resources in BDIO, publishers SHALL adhere to the guidelines in this section: this ensures data size is minimized and interpretation by processors can be consistent. BDIO files can be used to describe files on a file system (real or virtual), entries within an archive, resources from the web or any other entity which can be described as hierarchal structure of named pieces of data.

### File Paths
BDIO files must be represented as a tree-like hierarchy starting with the base file identified by the root object. The file's "path" property is used to identify the location within the hierarchy. The path MUST be a valid absolute URI. Generally this will be an RFC 8089 "file" URI representing an absolute path to a file on the file system, however it may be any URI. Special considerations are necessary for the URI representing an archive entry: archive entry paths must be encoding using the pattern:

````
<scheme> ":" <archive-URI> "#" <entry-name>
````

It is possible to encode archive entry paths at arbitrary "nesting levels" (i.e. archives within archives) by recursively applying this pattern, however, it is important when constructing archive entry path URIs that the URI of the archive itself be encoded (including any "/" characters). As archive nesting levels increase, so will the encodings (e.g. a "/" will initially be encoded as "%2F", at the next nesting level it will appear as "%252F"). All URI encodings MUST be performed on NFC normalized UTF-8 encoded byte sequences. Trailing slashes and files named "." or ".." MUST be omitted. The scheme should be used to identify the archive format. Archive entry names SHOULD start with a "/", however there are cases where the entry name can be used without the leading slash (refer to [Appendix C][#common-file-path-archive-schemes] for additional details).

### File Types
Metadata regarding how the content of a file should be (or was) interpreted is split over several data properties in BDIO. The file system type is defined the role a file plays in the structure of the file hierarchy, it should be obtained either directly from the file system or from archive metadata used to preserve the original file system structure. The content type describes how the contents of the file should be interpreted, often times this information is inferred from the file name (e.g. extension matching); however producers may know the type as a consequence of processing the file. Publishers MUST NOT include a content type obtained through simple file name matching as this work can be done by a processor later; if content type is represented in metadata using a different format (e.g. using extended file attributes), or if the content type was determined based on some specific processing performed on the actual contents of the file, it is appropriate to include the content type, even if the result would be the same as computed through standard name mapping. Text based content SHOULD include the encoding (this information MUST NOT be included in the content type); it is possible that the encoding can be determined without a content type. Symbolic links can be recorded using the link path: the value is the same format described for file paths.

Processors MAY imply the file system type according the following rules, publishers MUST NOT generate conflicting data and consumers SHOULD reject data containing conflicts:

1. If another file references the file as a parent...
    * A byte count or content type implies a file system type of `directory/archive`
    * Otherwise the implied file system type is `directory`
1. A link path implies a file system type of `symlink`
1. An encoding implies a file system type of `regular/text`
1. Processors MAY apply implementation specific content type or file path hueristics to determine the file system type, otherwise the implied file system type is `regular`

## License Properties

The terms under which a project is licensed and the terms under which a component is used are described using the simple license relationships `license` and `licenseOrLater` or the complex license relationships `licenseDisjunction`, `licenseConjunction` and `licenseException`. Additionally, an intermediate `LicenseGroup` node may be embedded to avoid ambiguity when using several licenses.

When using simple license relationships, they MUST specify a single license; multiple complex license relationships may be used, however if more then two are in use, they MUST specify the same relationship. Publishers MUST NOT mix simple and complex license relationships. If multiple complex relationships are used, exceptions are considered first and conjunction takes precedence over disjunction.
